{
  "_args": [
    [
      {
        "raw": "firebaseui",
        "scope": null,
        "escapedName": "firebaseui",
        "name": "firebaseui",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/Users/chinweiwong/projects/validately"
    ]
  ],
  "_from": "firebaseui@latest",
  "_id": "firebaseui@2.0.0",
  "_inCache": true,
  "_location": "/firebaseui",
  "_nodeVersion": "6.9.1",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/firebaseui-2.0.0.tgz_1495052438498_0.08040692610666156"
  },
  "_npmUser": {
    "name": "firebase",
    "email": "operations+plainlogo@firebase.com"
  },
  "_npmVersion": "3.10.8",
  "_phantomChildren": {},
  "_requested": {
    "raw": "firebaseui",
    "scope": null,
    "escapedName": "firebaseui",
    "name": "firebaseui",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/firebaseui/-/firebaseui-2.0.0.tgz",
  "_shasum": "8fc48377bcd49d38b0d152dac2eddfe79cab1398",
  "_shrinkwrap": null,
  "_spec": "firebaseui",
  "_where": "/Users/chinweiwong/projects/validately",
  "author": {
    "name": "Google"
  },
  "bugs": {
    "url": "https://github.com/firebase/firebaseui-web/issues"
  },
  "dependencies": {
    "firebase": "^4.0.0"
  },
  "description": "Javascript library for customizable UI on top of Firebase SDK",
  "devDependencies": {
    "closure-builder": "^2.0.17",
    "del": "^2.2.2",
    "dialog-polyfill": "^0.4.7",
    "firebase-tools": "^3.0.8",
    "google-closure-compiler": "^20160713.2.0",
    "google-closure-library": "^20170409.0.0",
    "google-closure-templates": "^20150410.0.0",
    "gulp": "^3.9.1",
    "gulp-clean-css": "^2.0.12",
    "gulp-closure-compiler": "^0.4.0",
    "gulp-concat-css": "^2.3.0",
    "gulp-connect": "^5.0.0",
    "gulp-sass": "^2.3.2",
    "gulp-util": "^3.0.7",
    "material-design-lite": "^1.2.0",
    "phantomjs-prebuilt": "^2.1.13",
    "protractor": "^4.0.9",
    "streamqueue": "^1.1.1"
  },
  "directories": {},
  "dist": {
    "shasum": "8fc48377bcd49d38b0d152dac2eddfe79cab1398",
    "tarball": "https://registry.npmjs.org/firebaseui/-/firebaseui-2.0.0.tgz"
  },
  "files": [
    "dist/**",
    "LICENSE",
    "README.md",
    "package.json"
  ],
  "gitHead": "f4228b8d68a9871685b35287823d4ab79b1602e4",
  "homepage": "https://github.com/firebase/firebaseui-web#readme",
  "license": "Apache-2.0",
  "main": "./dist/npm.js",
  "maintainers": [
    {
      "name": "firebase",
      "email": "operations+plainlogo@firebase.com"
    }
  ],
  "name": "firebaseui",
  "optionalDependencies": {},
  "readme": "[![Build Status](https://travis-ci.org/firebase/firebaseui-web.svg?branch=master)](https://travis-ci.org/firebase/firebaseui-web)\n\n# FirebaseUI for Web — Auth\n\nFirebaseUI is an open-source JavaScript library for Web that provides simple,\ncustomizable UI bindings on top of [Firebase](https://firebase.google.com) SDKs\nto eliminate boilerplate code and promote best practices.\n\nFirebaseUI Auth provides a drop-in auth solution that handles the UI flows for\nsigning in users with email addresses and passwords, and Identity Provider Sign\nIn using Google, Facebook and others. It is built on top of\n[Firebase Auth](https://firebase.google.com/docs/auth).\n\nThe FirebaseUI component implements best practices for authentication on mobile\ndevices and websites, helping to sign-in and sign-up conversion for your app. It\nalso handles cases like account recovery and account linking that can be\nsecurity sensitive and error-prone to handle.\n\nFirebaseUI Auth clients are also available for\n[iOS](https://github.com/firebase/firebaseui-ios) and\n[Android](https://github.com/firebase/firebaseui-android).\n\nFirebaseUI fully supports all recent browsers. Signing in with federated\nproviders (Google, Facebook, Twitter, Github) is not yet supported in\nnon-browser environments (Cordova, React Native, Ionic...) nor Chrome\nextensions.\n\n## Table of Contents\n\n1. [Installation](#installation)\n2. [Usage instructions](#using-firebaseui-for-authentication)\n3. [Configuration](#configuration)\n4. [Customization](#customizing-firebaseui-for-authentication)\n5. [Advanced](#advanced)\n6. [Developer Setup](#developer-setup)\n7. [Known issues](#known-issues)\n8. [Release Notes](#release-notes)\n\n## Installation\n\n### CDN\n\nYou just need to include the following script and CSS file in the `<head>` tag\nof your page, below the initialization snippet from the Firebase Console:\n\n```html\n<script src=\"https://cdn.firebase.com/libs/firebaseui/2.0.0/firebaseui.js\"></script>\n<link type=\"text/css\" rel=\"stylesheet\" href=\"https://cdn.firebase.com/libs/firebaseui/2.0.0/firebaseui.css\" />\n```\n\n### npm Module\n\nInstall FirebaseUI and its dependencies via npm using the following command:\n\n```bash\n$ npm install firebaseui --save\n```\n\nYou can then `require` the following modules within your source files:\n\n```javascript\nvar firebase = require('firebase');\nvar firebaseui = require('firebaseui');\n```\n\nOr include the required files in your HTML, if your HTTP Server serves the files\nwithin `node_modules/`:\n\n```html\n<script src=\"node_modules/firebaseui/dist/firebaseui.js\"></script>\n<link type=\"text/css\" rel=\"stylesheet\" href=\"node_modules/firebaseui/dist/firebaseui.css\" />\n```\n\n### Bower component\n\nInstall FirebaseUI and its dependencies via Bower using the following command:\n\n```bash\n$ bower install firebaseui --save\n```\n\nYou can then include the required files in your HTML, if your HTTP Server serves\nthe files within `bower_components/`:\n\n```html\n<script src=\"bower_components/firebaseui/dist/firebaseui.js\"></script>\n<link type=\"text/css\" rel=\"stylesheet\" href=\"bower_components/firebaseui/dist/firebaseui.css\" />\n```\n\n## Using FirebaseUI for Authentication\n\nFirebaseUI includes the following flows:\n\n1. Interaction with Identity Providers such as Google and Facebook\n2. Phone number based authentication\n3. Sign-up and sign-in with email accounts\n4. Password reset\n5. Prevention of account duplication (activated when\n*\"One account per email address\"* setting is enabled in the\n[Firebase console](https://console.firebase.google.com). This setting is enabled\nby default.)\n6. [Account Chooser](https://www.accountchooser.com/learnmore.html?lang=en) for\nremembering emails\n\n### Configuring sign-in providers\n\nTo use FirebaseUI to authenticate users you first need to configure each\nprovider you want to use in their own developer app settings. Please read the\n*Before you begin* section of Firebase Authentication at the following links:\n\n- [Phone number](https://firebase.google.com/docs/auth/web/phone-auth)\n- [Email and password](https://firebase.google.com/docs/auth/web/password-auth#before_you_begin)\n- [Google](https://firebase.google.com/docs/auth/web/google-signin#before_you_begin)\n- [Facebook](https://firebase.google.com/docs/auth/web/facebook-login#before_you_begin)\n- [Twitter](https://firebase.google.com/docs/auth/web/twitter-login#before_you_begin)\n- [Github](https://firebase.google.com/docs/auth/web/github-auth#before_you_begin)\n\n### Starting the sign-in flow\n\nYou first need to initialize your\n[Firebase app](https://firebase.google.com/docs/web/setup#prerequisites). The\n`firebase.auth.Auth` instance should be passed to the constructor of\n`firebaseui.auth.AuthUI`. You can then call the `start` method with the CSS\nselector that determines where to create the widget, and a configuration object.\n\nThe following example shows how to set up a sign-in screen with all supported\nproviders. Please refer to the [demo application in the examples folder](demo/)\nfor a more in-depth example, showcasing a Single Page Application mode.\n\n> Firebase and FirebaseUI do not work when executed directly from a file (i.e.\n> opening the file in your browser, not through a web server). Always run\n> `firebase serve` (or your preferred local server) to test your app locally.\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\">\n    <title>Sample FirebaseUI App</title>\n    <!-- *******************************************************************************************\n       * TODO(DEVELOPER): Paste the initialization snippet from:\n       * Firebase Console > Overview > Add Firebase to your web app. *\n       ***************************************************************************************** -->\n    <script src=\"https://cdn.firebase.com/libs/firebaseui/2.0.0/firebaseui.js\"></script>\n    <link type=\"text/css\" rel=\"stylesheet\" href=\"https://cdn.firebase.com/libs/firebaseui/2.0.0/firebaseui.css\" />\n    <script type=\"text/javascript\">\n      // FirebaseUI config.\n      var uiConfig = {\n        signInSuccessUrl: '<url-to-redirect-to-on-success>',\n        signInOptions: [\n          // Leave the lines as is for the providers you want to offer your users.\n          firebase.auth.GoogleAuthProvider.PROVIDER_ID,\n          firebase.auth.FacebookAuthProvider.PROVIDER_ID,\n          firebase.auth.TwitterAuthProvider.PROVIDER_ID,\n          firebase.auth.GithubAuthProvider.PROVIDER_ID,\n          firebase.auth.EmailAuthProvider.PROVIDER_ID,\n          firebase.auth.PhoneAuthProvider.PROVIDER_ID\n        ],\n        // Terms of service url.\n        tosUrl: '<your-tos-url>'\n      };\n\n      // Initialize the FirebaseUI Widget using Firebase.\n      var ui = new firebaseui.auth.AuthUI(firebase.auth());\n      // The start method will wait until the DOM is loaded.\n      ui.start('#firebaseui-auth-container', uiConfig);\n    </script>\n  </head>\n  <body>\n    <!-- The surrounding HTML is left untouched by FirebaseUI.\n         Your app may use that space for branding, controls and other customizations.-->\n    <h1>Welcome to My Awesome App</h1>\n    <div id=\"firebaseui-auth-container\"></div>\n  </body>\n</html>\n```\n\nHere is how you would track the Auth state across all your pages:\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\">\n    <title>Sample FirebaseUI App</title>\n    <!-- *******************************************************************************************\n       * TODO(DEVELOPER): Paste the initialization snippet from:\n       * Firebase Console > Overview > Add Firebase to your web app. *\n       ***************************************************************************************** -->\n    <script type=\"text/javascript\">\n      initApp = function() {\n        firebase.auth().onAuthStateChanged(function(user) {\n          if (user) {\n            // User is signed in.\n            var displayName = user.displayName;\n            var email = user.email;\n            var emailVerified = user.emailVerified;\n            var photoURL = user.photoURL;\n            var uid = user.uid;\n            var phoneNumber = user.phoneNumber;\n            var providerData = user.providerData;\n            user.getToken().then(function(accessToken) {\n              document.getElementById('sign-in-status').textContent = 'Signed in';\n              document.getElementById('sign-in').textContent = 'Sign out';\n              document.getElementById('account-details').textContent = JSON.stringify({\n                displayName: displayName,\n                email: email,\n                emailVerified: emailVerified,\n                phoneNumber: phoneNumber,\n                photoURL: photoURL,\n                uid: uid,\n                accessToken: accessToken,\n                providerData: providerData\n              }, null, '  ');\n            });\n          } else {\n            // User is signed out.\n            document.getElementById('sign-in-status').textContent = 'Signed out';\n            document.getElementById('sign-in').textContent = 'Sign in';\n            document.getElementById('account-details').textContent = 'null';\n          }\n        }, function(error) {\n          console.log(error);\n        });\n      };\n\n      window.addEventListener('load', function() {\n        initApp()\n      });\n    </script>\n  </head>\n  <body>\n    <h1>Welcome to My Awesome App</h1>\n    <div id=\"sign-in-status\"></div>\n    <div id=\"sign-in\"></div>\n    <div id=\"account-details\"></div>\n  </body>\n</html>\n\n```\n\n## Configuration\n\nFirebaseUI supports the following configuration parameters.\n\n<table>\n<thead>\n<tr>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Required</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>callbacks</td>\n<td>No</td>\n<td>\n  A list of developers <a href=\"#available-callbacks\">callbacks</a> after\n  specific events.\n  <br/>\n  <em>Default:</em> <code>[]</code>\n</td>\n</tr>\n<tr>\n<td>credentialHelper</td>\n<td>No</td>\n<td>\n  The Credential Helper to use.\n  See <a href=\"#credential-helper\">Credential Helper</a>.\n  <br/>\n  <em>Default:</em>\n  <code>firebaseui.auth.CredentialHelper.ACCOUNT_CHOOSER_COM</code>\n</td>\n</tr>\n<tr>\n<td>queryParameterForSignInSuccessUrl</td>\n<td>No</td>\n<td>\n  The redirect URL parameter name for the sign-in success URL. See\n  <a href=\"#overwriting-the-sign-in-success-url\">Overwriting the sign-in success URL</a>.\n  <br/>\n  <em>Default:</em> <code>\"signInSuccessUrl\"</code>\n</td>\n</tr>\n<tr>\n<td>queryParameterForWidgetMode</td>\n<td>No</td>\n<td>\n  The redirect URL parameter name for the “mode” of the Widget.\n  See <a href=\"#firebaseui-widget-modes\">FirebaseUI widget modes</a>.\n  <br/>\n  <em>Default:</em> <code>\"mode\"</code>\n</td>\n</tr>\n<tr>\n<tr>\n<td>signInFlow</td>\n<td>No</td>\n<td>\n  The sign-in flow to use for IDP providers: <code>redirect</code> or\n  <code>popup</code>.\n  <br/>\n  <em>Default:</em> <code>\"redirect\"</code>\n</td>\n</tr>\n<tr>\n<tr>\n<td>signInOptions</td>\n<td>Yes</td>\n<td>\n  The list of <a href=\"#available-providers\">providers</a> enabled for signing\n  into your app. The order you specify them will be the order they are displayed\n  on the sign-in provider selection screen.\n</td>\n</tr>\n<tr>\n<tr>\n<td>signInSuccessUrl</td>\n<td>No</td>\n<td>\n  The URL where to redirect the user after a successful sign-in.\n  <strong>Required</strong> when the <code>signInSuccess</code> callback is not\n  used or when it returns <code>true</code>.\n</td>\n</tr>\n<tr>\n<td>tosUrl</td>\n<td>Yes</td>\n<td>The URL of the Terms of Service page.</td>\n</tr>\n</tbody>\n</table>\n\n### Credential Helper\n\nThe role of a credential helper is to help your users sign into you website.\nWhen one is enabled, your users will be prompted with email addresses and\nusernames they have saved from your app or other applications. To achieve this,\n[accountchooser.com](https://www.accountchooser.com/learnmore.html) is\navailable. Upon signing in or signing up with email, the user will be redirected\nto the accountchooser.com website and will be able to select one of their saved\naccounts. It is recommended to use this, but you can also disable it by\nspecifying the value below.\n\n|Credential Helper |Value                                                 |\n|------------------|------------------------------------------------------|\n|accountchooser.com|`firebaseui.auth.CredentialHelper.ACCOUNT_CHOOSER_COM`|\n|None (disable)    |`firebaseui.auth.CredentialHelper.NONE`               |\n\n### Available providers\n\n|Provider          |Value                                           |\n|------------------|------------------------------------------------|\n|Google            |`firebase.auth.GoogleAuthProvider.PROVIDER_ID`  |\n|Facebook          |`firebase.auth.FacebookAuthProvider.PROVIDER_ID`|\n|Twitter           |`firebase.auth.TwitterAuthProvider.PROVIDER_ID` |\n|Github            |`firebase.auth.GithubAuthProvider.PROVIDER_ID`  |\n|Email and password|`firebase.auth.EmailAuthProvider.PROVIDER_ID`   |\n|Phone number      |`firebase.auth.PhoneAuthProvider.PROVIDER_ID`   |\n\n### Custom scopes\n\nTo specify custom scopes per provider, you can pass an object instead of just\nthe provider value:\n\n```javascript\nui.start('#firebaseui-auth-container', {\n  signInOptions = [\n    {\n      provider: firebase.auth.GoogleAuthProvider.PROVIDER_ID,\n      scopes: [\n        'https://www.googleapis.com/auth/plus.login'\n      ]\n    },\n    {\n      provider: firebase.auth.FacebookAuthProvider.PROVIDER_ID,\n      scopes: [\n        'public_profile',\n        'email',\n        'user_likes',\n        'user_friends'\n      ]\n    },\n    firebase.auth.TwitterAuthProvider.PROVIDER_ID, // Twitter does not support scopes.\n    firebase.auth.EmailAuthProvider.PROVIDER_ID // Other providers don't need to be given as object.\n  ]\n});\n```\n\n### Configure Email Provider\n\nThe `EmailAuthProvider` can be configured to require the user to enter a display name (defaults to `true`).\n\n```javascript\nui.start('#firebaseui-auth-container', {\n  signInOptions = [\n    {\n      provider: firebase.auth.EmailAuthProvider.PROVIDER_ID,\n      requireDisplayName: false\n    }\n  ]\n});\n```\n\n### Configure Phone Provider\n\nThe `PhoneAuthProvider` can be configured with custom reCAPTCHA parameters\nwhether reCAPTCHA is visible or invisible (defaults to `normal`). Refer to the\n[reCAPTCHA API docs](https://developers.google.com/recaptcha/docs/display) for\nmore details. The following options are currently supported. Any other\nparameters will be ignored.\n\n```javascript\nui.start('#firebaseui-auth-container', {\n  signInOptions = [\n    {\n      provider: firebase.auth.PhoneAuthProvider.PROVIDER_ID,\n      recaptchaParameters: {\n        type: 'image', // 'audio'\n        size: 'normal', // 'invisible' or 'compact'\n        badge: 'bottomleft' //' bottomright' or 'inline' applies to invisible.\n      }\n    }\n  ]\n});\n```\n\n### Sign In Flows\n\nTwo sign in flows are available:\n\n- `redirect`, the default, will perform a full page redirect to the sign-in page\nof the provider (Google, Facebook...). This is recommended for mobile apps.\n- The `popup` flow will open a popup to the sign-in page of the provider. If the\npopup is blocked by the browser, it will fall back to a full page redirect.\n\n### Available callbacks\n\n#### `signInSuccess(currentUser, credential, redirectUrl)`\n\n**Parameters:**\n\n|Name         |Type                          | Optional|Description                                                                                                                                                              |\n|-------------|------------------------------|---------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n|`currentUser`|`firebase.User`               |No       |The logged in user.                                                                                                                                                      |\n|`credential` |`firebase.auth.AuthCredential`|Yes      |The credential used to sign in the user.                                                                                                                                  |\n|`redirectUrl`|`string`                      |Yes      |The URL where the user is redirected after the callback finishes. It will only be given if you [overwrite the sign-in success URL](#overwriting-the-sign-in-success-url).|\n\n**Should return: `boolean`**\n\nIf the callback returns `true`, then the page is automatically redirected\ndepending on the case:\n\n- If no `signInSuccessUrl` parameter was given in the URL (See:\n[Overwriting the sign-in success URL](#overwriting-the-sign-in-success-url))\nthen the default `signInSuccessUrl` in config is used.\n- If the value is provided in the URL, that value will be used instead of the\nstatic `signInSuccessUrl` in config.\n\nIf the callback returns `false` or nothing, the page is not automatically\nredirected.\n\n#### `uiShown()`\n\nThis callback is triggered the first time the widget UI is rendered. This is\nuseful for cases where the application should display a custom loader before\nFirebaseUI is displayed.\n\n### Example with all parameters used\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\">\n    <title>Sample FirebaseUI App</title>\n    <!-- *******************************************************************************************\n       * TODO(DEVELOPER): Paste the initialization snippet from:\n       * Firebase Console > Overview > Add Firebase to your web app. *\n       ***************************************************************************************** -->\n    <script src=\"https://cdn.firebase.com/libs/firebaseui/2.0.0/firebaseui.js\"></script>\n    <link type=\"text/css\" rel=\"stylesheet\" href=\"https://cdn.firebase.com/libs/firebaseui/2.0.0/firebaseui.css\" />\n    <script type=\"text/javascript\">\n      // FirebaseUI config.\n      var uiConfig = {\n        callbacks: {\n          signInSuccess: function(currentUser, credential, redirectUrl) {\n            // Do something.\n            // Return type determines whether we continue the redirect automatically\n            // or whether we leave that to developer to handle.\n            return true;\n          },\n          uiShown: function() {\n            // The widget is rendered.\n            // Hide the loader.\n            document.getElementById('loader').style.display = 'none';\n          }\n        },\n        credentialHelper: firebaseui.auth.CredentialHelper.ACCOUNT_CHOOSER_COM,\n        // Query parameter name for mode.\n        queryParameterForWidgetMode: 'mode',\n        // Query parameter name for sign in success url.\n        queryParameterForSignInSuccessUrl: 'signInSuccessUrl',\n        // Will use popup for IDP Providers sign-in flow instead of the default, redirect.\n        signInFlow: 'popup',\n        signInSuccessUrl: '<url-to-redirect-to-on-success>',\n        signInOptions: [\n          // Leave the lines as is for the providers you want to offer your users.\n          firebase.auth.GoogleAuthProvider.PROVIDER_ID,\n          firebase.auth.FacebookAuthProvider.PROVIDER_ID,\n          firebase.auth.TwitterAuthProvider.PROVIDER_ID,\n          {\n            provider: firebase.auth.EmailAuthProvider.PROVIDER_ID,\n            // Whether the display name should be displayed in the Sign Up page.\n            requireDisplayName: true\n          },\n          {\n            provider: firebase.auth.PhoneAuthProvider.PROVIDER_ID,\n            // Invisible reCAPTCHA with image challenge and bottom left badge.\n            recaptchaParameters: {\n              type: 'image',\n              size: 'invisible',\n              badge: 'bottomleft'\n            }\n          }\n        ],\n        // Terms of service url.\n        tosUrl: '<your-tos-url>'\n      };\n\n      var ui = new firebaseui.auth.AuthUI(firebase.auth());\n      // The start method will wait until the DOM is loaded.\n      ui.start('#firebaseui-auth-container', uiConfig);\n    </script>\n  </head>\n  <body>\n    <!-- The surrounding HTML is left untouched by FirebaseUI.\n         Your app may use that space for branding, controls and other customizations.-->\n    <h1>Welcome to My Awesome App</h1>\n    <div id=\"firebaseui-auth-container\"></div>\n    <div id=\"loader\">Loading...</div>\n  </body>\n</html>\n```\n\n## Customizing FirebaseUI for authentication\n\nCurrently, FirebaseUI does not offer customization out of the box. However, the\nHTML around the widget is not affected by it so you can display everything you\nwant around the widget container.\n\n## Advanced\n\n### FirebaseUI widget modes\n\nUpon initialization, FirebaseUI will look for the `mode` parameter in the URL.\nDepending on the value of this parameter, it will trigger a specific mode. When\nno `mode` parameter is found, it will default to the sign-in mode.\n\nYou can change the name of this parameter with the `queryParameterForWidgetMode`\nconfiguration parameter.\n\n|Query parameter value|Description |\n|---------------------|------------|\n|`?mode=select`       |Sign-in mode|\n\n**Example:**\n\n    https://<url-of-the-widget>?mode=select\n\n### Overwriting the sign-in success URL\n\nYou can pass a query parameter to the widget's URL that will overwrite the URL\nthe user is redirected to after a successful sign-in. If you do so, you must set\nthe configuration `signInSuccessUrl` value (even if it will be overwritten).\nWhen passing the redirect URL this way, the `signInSuccess` callback will\nreceive the value as the `redirectUrl` argument.\n\nYou **must include the mode explicitly** in the URL when using the\n`signInSuccessUrl` parameter, otherwise FirebaseUI will directly redirect to the\nURL specified.\n\nYou can change the name of this parameter with the\n`queryParameterForSignInSuccessUrl` configuration parameter.\n\n**Example:**\n\n`https://<url-of-the-widget>?mode=select&signInSuccessUrl=signedIn.html` will\nredirect the user to `https://<url-of-the-widget>/signedIn.html` after a\nsuccessful sign-in flow.\n\n## Developer Setup\n\n### Dependencies\n\nTo set up a development environment to build FirebaseUI from source, you must\nhave the following installed:\n- Node.js (>= 6.0.0)\n- npm (should be included with Node.js)\n- Java Runtime Environment\n\nIn order to run the demo and tests, you must also have:\n- Python (2.7)\n\nDownload the FirebaseUI source and its dependencies with:\n\n```bash\ngit clone https://github.com/firebase/firebaseui-web.git\ncd firebaseui-web\nnpm install\n```\n\n### Building FirebaseUI\n\nTo build the library, run:\n```bash\nnpm run build\n```\n\nThis will create output files in the `dist/` folder.\n\n### Running the demo app\n\nTo run the demo app, you must have a Firebase project set up on the\n[Firebase Console](https://firebase.google.com/console). Copy\n`demo/public/sample-config.js` to `demo/public/config.js`:\n\n```bash\ncp demo/public/sample-config.js demo/public/config.js\n```\n\nCopy the data from the \"Add Firebase to your web app\" flow in Firebase Console.\nNext, run\n\n```bash\nnpm run demo\n```\n\nThis will start a local server serving a FirebaseUI demo app with all local\nchanges. More details can be found in the [demo app folder](demo/), covering\nhow to configure the app to be deployed on a Firebase Hosting instance.\n\n### Running unit tests.\n\nAll unit tests can be run on the command line (via PhantomJS) with:\n\n```bash\nnpm test\n```\n\nAlternatively, the unit tests can be run manually by running\n\n```bash\nnpm run serve\n```\n\nThen, all unit tests can be run at: http://localhost:4000/buildtools/all_tests.html\nYou can also run tests individually by accessing each HTML file under\n`generated/tests`, for example: http://localhost:4000/generated/tests/javascript/widgets/authui_test.html\n\n### Run tests using SauceLabs\n\n*You need a [SauceLabs](https://saucelabs.com/) account to run tests on\nSauceLabs.*\n\nGo to your SauceLab account, under \"My Account\", and copy paste the access key.\nNow export the following variables, *in two Terminal windows*:\n\n```bash\nexport SAUCE_USERNAME=<your username>\nexport SAUCE_ACCESS_KEY=<the copy pasted access key>\n```\n\n Then, in one Terminal window, start SauceConnect:\n\n ```bash\n./buildtools/sauce_connect.sh\n```\n\nTake note of the \"Tunnel Identifier\" value logged in the terminal,at the top. In\nthe other terminal that has the exported variables, run the tests:\n\n```bash\nnpm test -- --saucelabs --tunnelIdentifier=<the tunnel identifier>\n```\n\n## Known issues\n\n### Firebase Auth does not work in Safari private browsing\n\nWhen a user has enabled the private browsing mode in Safari, the web storage is\ndisabled. This currently results in an error being thrown upon Firebase Auth\ninitialization. Therefore, when following the snippets above, FirebaseUI will\nnever get initialized and no UI will be displayed.\n\n### Tips for Single Page apps (`UI Widget is already rendered on the page` warning)\n\nWhen re-rendering the FirebaseUI Auth widget (for instance after signing in a\nuser, signing her out and trying to sign her in again), it will sometimes log a\nwarning:\n\n> UI Widget is already rendered on the page and is pending some user\n> interaction. Only one widget instance can be rendered per page. The previous\n> instance has been automatically reset.\n\nThis happens when the UI widget was in a pending state, i.e. the user was in the\nmiddle of performing a sign-in flow. You should generally avoid re-rendering the\nwidget in the middle of an action, but if you do, to avoid the warning, you\nshould use the `reset()` method before re-rendering the widget.\n\n### FirebaseUI is broken in IE11 when deployed on a local server accessed through `localhost` (but works when deployed on a remote server)\n\nSeveral developers reported issues with IE11 when testing the widget integration on a server deployed locally, accessing the application through a `localhost` address. However, it doesn't impact applications deployed on a server (as you can verify in the [demo app](https://fir-ui-demo-84a6c.firebaseapp.com/)).\n\n## Release Notes\n\n**Latest**: https://github.com/firebase/firebaseui-web/releases/latest\n\n**For v1.0.0 and superior:** https://github.com/firebase/firebaseui-web/releases\n\n### 0.5.0\n\nSee the milestone [0.5.0](https://github.com/firebase/firebaseui-web/milestone/1)\nfor the issues covered in this release. Below is a summary of the most important\nones:\n\n- FirebaseUI now supports **Single Page Application**: a `reset` method was\nadded to allow to dispose of the widget. When the user leaves a page where the\nFirebaseUI widget was rendered (for instance in the `componentWillUnmount`\nmethod of a React component), call the `reset` method of the\n`firebaseui.auth.AuthUI` instance you created. Also, call the `reset` method\nbefore rendering again the widget if one has already been rendered on the page.\nPlease refer to the [demo app](demo/) for guidance on how to use FirebaseUI in a\nSingle Page Application context.\n- **Custom scopes** can now be added for each provider. See [Custom Scopes](custom-scopes).\n- Several issues, different but related to the `displayName` not being present\nafter sign up with email and password, have been fixed.\n- A new config parameter has been added: `signInFlow`. It allows to specify\nwhether the Identity Providers sign in flows should be done through `redirect`\n(the default) or `popup`. See [Sign In Flows](sign-in-flows).\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/firebase/firebaseui-web.git"
  },
  "scripts": {
    "build": "npm run build-soy && gulp",
    "build-soy": "node buildtools/soy_files.js",
    "demo": "npm run build && ./buildtools/run_demo.sh",
    "generate-test-files": "./buildtools/generate_test_files.sh",
    "prepublish": "npm run test && cp -r dist demo/public",
    "serve": "npm run build && npm run generate-test-files && gulp serve",
    "test": "npm run build && npm run generate-test-files && ./buildtools/run_tests.sh"
  },
  "style": "dist/firebaseui.css",
  "test": "npm run test",
  "version": "2.0.0"
}
