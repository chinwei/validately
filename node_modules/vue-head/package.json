{
  "_args": [
    [
      {
        "raw": "vue-head",
        "scope": null,
        "escapedName": "vue-head",
        "name": "vue-head",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/Users/chinweiwong/projects/validately"
    ]
  ],
  "_from": "vue-head@latest",
  "_id": "vue-head@2.0.11",
  "_inCache": true,
  "_location": "/vue-head",
  "_nodeVersion": "6.9.1",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/vue-head-2.0.11.tgz_1492858066442_0.19358221697621047"
  },
  "_npmUser": {
    "name": "ktquez",
    "email": "ktquez@gmail.com"
  },
  "_npmVersion": "4.0.2",
  "_phantomChildren": {},
  "_requested": {
    "raw": "vue-head",
    "scope": null,
    "escapedName": "vue-head",
    "name": "vue-head",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/vue-head/-/vue-head-2.0.11.tgz",
  "_shasum": "d063b87d99e8898002c4967f558f82437b23f72a",
  "_shrinkwrap": null,
  "_spec": "vue-head",
  "_where": "/Users/chinweiwong/projects/validately",
  "author": {
    "name": "Alan Albuquerque - ktquez"
  },
  "bugs": {
    "url": "https://github.com/ktquez/vue-head/issues"
  },
  "dependencies": {},
  "description": "Manipulating the meta information of the head tag, a simple and easy way",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "d063b87d99e8898002c4967f558f82437b23f72a",
    "tarball": "https://registry.npmjs.org/vue-head/-/vue-head-2.0.11.tgz"
  },
  "gitHead": "93b4d2e6b1dd8eb964befe0dfd806a9fb4edf4f0",
  "homepage": "https://github.com/ktquez/vue-head#readme",
  "keywords": [
    "head",
    "metatag",
    "SEO",
    "vue",
    "google"
  ],
  "license": "MIT",
  "main": "vue-head.js",
  "maintainers": [
    {
      "name": "ktquez",
      "email": "ktquez@gmail.com"
    }
  ],
  "name": "vue-head",
  "optionalDependencies": {},
  "readme": "# vue-head\r\n\r\nManipulating the meta information of the head tag, a simple and easy way  \r\nMotivated by [HEAD](https://github.com/joshbuchea/HEAD)\r\n\r\n---\r\n\r\n**For syntax of the previous version [click here](https://github.com/ktquez/vue-head/tree/v1.0.5)**\r\n\r\n---\r\n\r\n## Usage\r\n**by CDN**\r\n```html\r\n...\r\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/vue/*version*/vue.min.js\"></script>\r\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/vue-router/*version*/vue-router.min.js\"></script>\r\n<script src=\"https://cdn.rawgit.com/ktquez/vue-head/master/vue-head.js\"></script>\r\n<script>\r\n  // Code here\r\n</script>\r\n```\r\nSee how to use with [this example](https://github.com/ktquez/vue-head/blob/master/example/index.html)\r\n\r\n\r\n**With NPM**\r\n```shell\r\nnpm install vue-head --save\r\n```\r\n\r\n```javascript\r\nimport Vue from 'vue'\r\nimport VueRouter from 'vue-router'\r\nimport VueHead from 'vue-head'\r\n\r\nVue.use(VueHead)\r\nVue.use(VueRouter)\r\n...\r\n```\r\n\r\n## Examples (New syntax)\r\n```javascript\r\nvar myComponent = Vue.extend({\r\n  data: function () {\r\n    return {\r\n      ...\r\n    }\r\n  },\r\n  head: {\r\n    title: {\r\n      inner: 'It will be a pleasure'\r\n    },\r\n    // Meta tags\r\n    meta: [\r\n      { name: 'application-name', content: 'Name of my application' },\r\n      { name: 'description', content: 'A description of the page', id: 'desc' }, // id to replace intead of create element\r\n      // ...\r\n      // Twitter\r\n      { name: 'twitter:title', content: 'Content Title' },\r\n      // with shorthand\r\n      { n: 'twitter:description', c: 'Content description less than 200 characters'},\r\n      // ...\r\n      // Google+ / Schema.org\r\n      { itemprop: 'name', content: 'Content Title' },\r\n      { itemprop: 'description', content: 'Content Title' },\r\n      // ...\r\n      // Facebook / Open Graph\r\n      { property: 'fb:app_id', content: '123456789' },\r\n      { property: 'og:title', content: 'Content Title' },\r\n      // with shorthand\r\n      { p: 'og:image', c: 'https://example.com/image.jpg' },\r\n      // ...\r\n    ],\r\n    // link tags\r\n    link: [\r\n      { rel: 'canonical', href: 'http://example.com/#!/contact/', id: 'canonical' },\r\n      { rel: 'author', href: 'author', undo: false }, // undo property - not to remove the element\r\n      { rel: 'icon', href: require('./path/to/icon-16.png'), sizes: '16x16', type: 'image/png' }, \r\n      // with shorthand\r\n      { r: 'icon', h: 'path/to/icon-32.png', sz: '32x32', t: 'image/png' },\r\n      // ...\r\n    ],\r\n    script: [\r\n      { type: 'text/javascript', src: 'cdn/to/script.js', async: true, body: true}, // Insert in body\r\n      // with shorthand\r\n      { t: 'application/ld+json', i: '{ \"@context\": \"http://schema.org\" }' },\r\n      // ...\r\n    ],\r\n    style: [\r\n      { type: 'text/css', inner: 'body { background-color: #000; color: #fff}', undo: false },\r\n      // ...\r\n    ]\r\n  }\r\n})\r\n```\r\n\r\nTo learn more possibilities tags in [HEAD](https://github.com/joshbuchea/HEAD)\r\n\r\n## Example with files .vue\r\n\r\n```html\r\n<template>\r\n  <!-- Code here -->\r\n</template>\r\n```\r\n```javascript\r\nexport default {\r\n  data: function () {\r\n    return {\r\n      title: 'My Title'\r\n    }\r\n  },\r\n  // Usage with context the component\r\n  head: {\r\n    // To use \"this\" in the component, it is necessary to return the object through a function\r\n    title: function () {\r\n      return {\r\n        inner: this.title\r\n      }\r\n    },\r\n    meta: [\r\n      { name: 'description', content: 'My description', id: 'desc' }\r\n    ]\r\n  }\r\n    ...\r\n  }\r\n}\r\n```\r\n```css\r\n<style scoped>\r\n  /* Code here */\r\n</style>\r\n```\r\nFor more questions, [check this example](https://github.com/ktquez/vue-head/blob/master/example/index.html)\r\n\r\n## Custom title\r\nYou can customize the page title with tab and complement, just add the properties `separator` and `complement` object in title\r\nSeparator by default uses the pipe character `|` and complement by default uses the title of the html document  \r\n\r\n```javascript\r\nhead: {\r\n  title: {\r\n    inner: 'My title',\r\n    separator: '-',\r\n    complement: 'My Complement'\r\n  },\r\n  //omited\r\n}\r\n```\r\n*If not please complement defines an empty value*\r\n\r\n## Default custom title\r\nIf you'd like to set default custom title options on every component you can pass options to VueHead when you're registering it for Vue, just like in example below.\r\n```javascript\r\nconst VueHead = require('vue-head')\r\n\r\nVue.use(VueHead, {\r\n  separator: '-',\r\n  complement: 'My Complement'\r\n})\r\n```\r\n\r\n## Using `this`\r\nFor using values with `this`, it is necessary to return the object through a function\r\n```javascript\r\ndata: {\r\n  myData: 'My description'\r\n},\r\n// omited\r\nmeta: function () {\r\n  return [\r\n    { name: 'description', content: this.myData }\r\n  ]\r\n}\r\n\r\n``` \r\n\r\n## Undo elements\r\nAll created tags will be removed as you leave the component, but you may want it to be not broken and remain in the DOM.   \r\nSo you should set `undo: false`\r\n```javascript\r\nstyle: [\r\n  { type: 'text/css', inner: 'body { background-color: #000; color: #fff}', undo: false }\r\n]\r\n```\r\n\r\n## Replace content the elements\r\nThere are some tags that are unique and that only need to update the content, such as meta tags `name=\"description\"` or `rel=\"canonical\"`.  \r\nTherefore, it is necessary to define a `id`, so that the element is found and is made the update correctly, avoiding duplicates tags.  \r\n```javascript\r\nmeta: [\r\n  { name: 'description', content: 'A description of the page', id: 'desc' }\r\n]\r\n```\r\n\r\n## Event emitted \r\n### Vue 1.*\r\nAt some point you may want to do something after the DOM is complete with the changes, to this the vue-head emits through the key `okHead`.  \r\nWith this, you can hear through the `events` option of your instance component.\r\n```javascript\r\n// omited\r\nevents: {\r\n  okHead: function () {\r\n    // Do something\r\n  }\r\n},\r\n```\r\n### Vue 2.*\r\n```javascript\r\ncreated: function () {\r\n  this.$on('okHead', function () {\r\n    // Do Something\r\n  });\r\n}\r\n```\r\n\r\n## Update elements with asynchronous data or after page loaded\r\nKeep the data tags updated through an update of the elements that have changed data, which are the reactive data of your component.\r\nIt is not automatic if you want to upgrade, simply issue the event `updateHead` soon after changing your data.\r\n\r\nFor example:  \r\n```javascript\r\n// omited\r\nmethods: {\r\n  getAsyncData: function () {\r\n    var self = this\r\n    window.setTimeout(function () {\r\n      self.title = 'My async title'\r\n      self.$emit('updateHead')\r\n    }, 3000)\r\n  }\r\n},\r\n```\r\n\r\n***Note: I recommend you use the vueRouter to request the data from the tags and build the header tags with synchronous data, updating real-time meta tags only have to use the business rules of your application.***\r\n\r\n\r\n## Keep alive\r\nSupported only in Vue next >2.0.*, Because it uses the new hooks activated and deactivated.  \r\n*Obs: In version <1.0. * Using making prompt to maintain the element in the document.* \r\n\r\n\r\n## Shorthand property\r\n\r\nproperty        | shorthand     | used tags\r\n--------------- | ------------- | ------------\r\ncharset         | `ch`          | `meta`\r\ntarget          | `tg`          | `base` \r\nname            | `n`           | `meta`\r\nhttp-equiv      | `he`          | `meta`\r\nitemprop        | `ip`          | `meta`\r\ncontent         | `c`           | `meta`\r\nproperty        | `p`           | `meta`\r\nrel             | `r`           | `link`\r\nhref            | `h`           | `link`\r\nsizes           | `sz`          | `link`\r\ntype            | `t`           | `link` `style`  `script`\r\nscheme          | `sc`          | `script`\r\nsrc             | `s`           | `script`\r\nasync           | `a`           | `script`\r\ndefer           | `d`           | `script`\r\ninner           | `i`           | `script` `style` \r\n\r\n## Support \r\n- Vue.js 2.0.*\r\n- Vue.js 1.0.*\r\n\r\n## Contributing\r\n- Check the open issues or open a new issue to start a discussion around your feature idea or the bug you found.\r\n- Fork repository, make changes, add your name and link in the authors session readme.md\r\n- Send a pull request\r\n\r\nIf you want a faster communication, find me on [@ktquez](https://twitter.com/ktquez)\r\n\r\n**thank you**\r\n\r\n\r\n\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/ktquez/vue-head.git"
  },
  "scripts": {},
  "version": "2.0.11"
}
